#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""
import re
import hashlib
import json
import logging
from typing import Dict, Optional, Any, Tuple
from datetime import datetime
import config

logger = logging.getLogger(__name__)

class DataValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Zabbix"""
    
    @staticmethod
    def validate_host_data(host_data: Dict) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        Returns: (valid: bool, error_message: str)
        """
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not host_data.get('hostid'):
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hostid"
        
        if not host_data.get('name'):
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è —Ö–æ—Å—Ç–∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è inventory
        inventory = host_data.get('inventory', {})
        if not inventory:
            return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç inventory"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        warnings = []
        if not inventory.get('vendor'):
            warnings.append("vendor –Ω–µ —É–∫–∞–∑–∞–Ω")
        if not inventory.get('model'):
            warnings.append("model –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        if warnings:
            logger.warning(f"–•–æ—Å—Ç {host_data['name']}: {', '.join(warnings)}")
        
        return True, ""
    
    @staticmethod
    def validate_ip(ip: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ IP –∞–¥—Ä–µ—Å–∞"""
        if not ip:
            return False
        
        pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
        if not re.match(pattern, ip):
            return False
        
        octets = ip.split('.')
        for octet in octets:
            if int(octet) > 255:
                return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        if ip in ['0.0.0.0', '127.0.0.1', '255.255.255.255']:
            return False
        
        return True


class DataNormalizer:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è NetBox"""
    
    @staticmethod
    def normalize_memory(memory: str) -> Optional[int]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –≤ GB
        '1.99 TB' -> 2038
        '512 GB' -> 512
        Returns: int (GB) or None
        """
        if not memory or memory == 'N/A':
            return None
        
        try:
            match = re.match(r'(\d+\.?\d*)\s*(TB|GB|MB)', memory, re.IGNORECASE)
            if match:
                value = float(match.group(1))
                unit = match.group(2).upper()
                
                if unit == 'TB':
                    return int(value * 1024)
                elif unit == 'GB':
                    return int(value)
                elif unit == 'MB':
                    return int(value / 1024)
            
            return None
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ '{memory}': {e}")
            return None
    
    @staticmethod
    def normalize_vendor(vendor: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"""
        if not vendor or vendor == 'N/A':
            return 'Unknown'
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        vendor_mapping = {
            'Dell Inc.': 'Dell',
            'DELL': 'Dell',
            'Hewlett Packard Enterprise': 'HPE',
            'HP': 'HPE',
            'Huawei Technologies Co., Ltd.': 'Huawei',
            'LENOVO': 'Lenovo',
            'VMware, Inc.': 'VMware',
        }
        
        vendor = vendor.strip()
        return vendor_mapping.get(vendor, vendor)
    
    @staticmethod
    def normalize_model(model: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if not model or model == 'N/A':
            return 'Unknown'
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        model = model.strip()
        model = re.sub(r'\s+', ' ', model)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        
        # –£–±–∏—Ä–∞–µ–º "To be filled by O.E.M." –∏ –ø–æ–¥–æ–±–Ω–æ–µ
        if 'to be filled' in model.lower():
            return 'Unknown'
        
        return model
    
    @staticmethod
    def create_slug(name: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ slug –¥–ª—è NetBox"""
        if not name:
            return 'unknown'
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        slug = name.lower()
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        slug = re.sub(r'[^a-z0-9-]', '-', slug)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
        slug = re.sub(r'-+', '-', slug)
        
        # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        slug = slug.strip('-')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (NetBox limit)
        if len(slug) > 50:
            slug = slug[:50].rstrip('-')
        
        return slug or 'unknown'


class HashCalculator:
    """–†–∞—Å—á–µ—Ç —Ö—ç—à–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    @staticmethod
    def calculate_host_hash(host_data: Dict, primary_ip: str = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        inventory = host_data.get('inventory', {})
        
        # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–ª—è
        hash_data = {
            'name': host_data.get('name', ''),
            'vendor': DataNormalizer.normalize_vendor(inventory.get('vendor', '')),
            'model': DataNormalizer.normalize_model(inventory.get('model', '')),
            'os': inventory.get('os', ''),
            'os_version': inventory.get('os_short', ''),
            'cpu': inventory.get('hardware', ''),
            'memory': inventory.get('software_app_a', ''),
            'cluster': inventory.get('alias', ''),
            'location': inventory.get('location', ''),
            'ip': primary_ip or '',
            'status': host_data.get('status', '')
        }
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö—ç—à
        json_str = json.dumps(hash_data, sort_keys=True, ensure_ascii=True)
        return hashlib.sha256(json_str.encode()).hexdigest()


class IPHelper:
    """–†–∞–±–æ—Ç–∞ —Å IP –∞–¥—Ä–µ—Å–∞–º–∏"""
    
    @staticmethod
    def get_primary_ip(host_data: Dict) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞ —Ö–æ—Å—Ç–∞"""
        interfaces = host_data.get('interfaces', [])
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º main interface
        for iface in interfaces:
            if iface.get('main') == '1' and iface.get('ip'):
                ip = iface['ip']
                if DataValidator.validate_ip(ip):
                    return ip
        
        # Fallback –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π IP
        for iface in interfaces:
            ip = iface.get('ip')
            if ip and DataValidator.validate_ip(ip):
                return ip
        
        return None
    
    @staticmethod
    def get_site_from_ip(ip: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Site –ø–æ IP –∞–¥—Ä–µ—Å—É"""
        if not DataValidator.validate_ip(ip):
            return config.DEFAULT_SITE
        
        octets = ip.split('.')
        subnet = f"{octets[0]}.{octets[1]}"
        
        site = config.SITE_MAPPING.get(subnet)
        if not site:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥—Å–µ—Ç—å {subnet} –¥–ª—è IP {ip}, –∏—Å–ø–æ–ª—å–∑—É–µ–º {config.DEFAULT_SITE}")
            return config.DEFAULT_SITE
        
        return site


class UHeightHelper:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ U"""
    
    @staticmethod
    def get_u_height(vendor: str, model: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞"""
        vendor = DataNormalizer.normalize_vendor(vendor)
        model = DataNormalizer.normalize_model(model)
        
        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á
        key = f"{vendor} {model}"
        
        # –ò—â–µ–º –≤ –º–∞–ø–ø–∏–Ω–≥–µ
        u_height = config.U_HEIGHT_MAPPING.get(key)
        
        if u_height is None:
            # –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –º–æ–¥–µ–ª–∏
            for map_key, height in config.U_HEIGHT_MAPPING.items():
                if model in map_key:
                    return height
            
            logger.warning(f"U-height –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è '{key}'")
            return None
        
        return u_height


class NotificationHelper:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    @staticmethod
    def format_sync_summary(new_hosts: list, changed_hosts: list, 
                           success_count: int, error_count: int,
                           new_models: list = None, format_type: str = 'HTML') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram"""
        if format_type == 'HTML':
            lines = [
                "üìä <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Zabbix ‚Üí NetBox –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>",
                "",
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{success_count}</b>",
                f"‚ùå –û—à–∏–±–æ–∫: <b>{error_count}</b>",
                ""
            ]
            
            if new_hosts:
                lines.append(f"üÜï <b>–ù–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(new_hosts)}):</b>")
                for host in new_hosts[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                    lines.append(f"  ‚Ä¢ <code>{host}</code>")
                if len(new_hosts) > 5:
                    lines.append(f"  <i>... –∏ –µ—â–µ {len(new_hosts) - 5}</i>")
                lines.append("")
            
            if changed_hosts:
                lines.append(f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(changed_hosts)}):</b>")
                for host in changed_hosts[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                    lines.append(f"  ‚Ä¢ <code>{host}</code>")
                if len(changed_hosts) > 5:
                    lines.append(f"  <i>... –∏ –µ—â–µ {len(changed_hosts) - 5}</i>")
                lines.append("")
            
            if new_models:
                lines.append(f"‚ö†Ô∏è <b>–ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ U-height ({len(new_models)}):</b>")
                for model in new_models[:3]:
                    lines.append(f"  ‚Ä¢ <code>{model}</code>")
                if len(new_models) > 3:
                    lines.append(f"  <i>... –∏ –µ—â–µ {len(new_models) - 3}</i>")
                lines.append("<i>–î–æ–±–∞–≤—å—Ç–µ –≤ U_HEIGHT_MAPPING</i>")
            
            lines.append(f"\nüïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        else:  # Markdown
            lines = [
                "üìä *–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Zabbix ‚Üí NetBox –∑–∞–≤–µ—Ä—à–µ–Ω–∞*",
                "",
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: *{success_count}*",
                f"‚ùå –û—à–∏–±–æ–∫: *{error_count}*",
                ""
            ]
            
            if new_hosts:
                lines.append(f"üÜï *–ù–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(new_hosts)}):*")
                for host in new_hosts[:5]:
                    lines.append(f"  ‚Ä¢ `{host}`")
                if len(new_hosts) > 5:
                    lines.append(f"  _... –∏ –µ—â–µ {len(new_hosts) - 5}_")
                lines.append("")
            
            if changed_hosts:
                lines.append(f"üîÑ *–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(changed_hosts)}):*")
                for host in changed_hosts[:5]:
                    lines.append(f"  ‚Ä¢ `{host}`")
                if len(changed_hosts) > 5:
                    lines.append(f"  _... –∏ –µ—â–µ {len(changed_hosts) - 5}_")
                lines.append("")
            
            if new_models:
                lines.append(f"‚ö†Ô∏è *–ù–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ U-height ({len(new_models)}):*")
                for model in new_models[:3]:
                    lines.append(f"  ‚Ä¢ `{model}`")
                if len(new_models) > 3:
                    lines.append(f"  _... –∏ –µ—â–µ {len(new_models) - 3}_")
                lines.append("_–î–æ–±–∞–≤—å—Ç–µ –≤ U\\_HEIGHT\\_MAPPING_")
            
            lines.append(f"\nüïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return "\n".join(lines)
    
    @staticmethod
    def format_error_notification(error: str, context: dict = None, format_type: str = 'HTML') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–ª—è Telegram"""
        if format_type == 'HTML':
            lines = [
                "üö® <b>–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</b>",
                "",
                f"‚ùå <code>{error}</code>",
            ]
            
            if context:
                lines.append("\n<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b>")
                for key, value in context.items():
                    lines.append(f"  ‚Ä¢ {key}: <code>{value}</code>")
            
            lines.append(f"\nüïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        else:  # Markdown
            lines = [
                "üö® *–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏*",
                "",
                f"‚ùå `{error}`",
            ]
            
            if context:
                lines.append("\n*–ö–æ–Ω—Ç–µ–∫—Å—Ç:*")
                for key, value in context.items():
                    lines.append(f"  ‚Ä¢ {key}: `{value}`")
            
            lines.append(f"\nüïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return "\n".join(lines)