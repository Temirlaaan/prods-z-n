#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
"""
import logging
import os
import subprocess
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import config
from sync import ServerSync
from utils import NotificationHelper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ ID)
AUTHORIZED_USERS = os.getenv('AUTHORIZED_USERS', '').split(',')

def is_authorized(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return str(user_id) in AUTHORIZED_USERS or not AUTHORIZED_USERS[0]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    if not is_authorized(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    keyboard = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", callback_data='sync_now'),
            InlineKeyboardButton("üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫", callback_data='sync_dry')
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status'),
            InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏", callback_data='logs')
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π Zabbix ‚Üí NetBox</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user = query.from_user
    
    if not is_authorized(user.id):
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await query.answer()
    
    if query.data == 'sync_now':
        await query.edit_message_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        await run_sync(query, context, dry_run=False)
    
    elif query.data == 'sync_dry':
        await query.edit_message_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω...")
        await run_sync(query, context, dry_run=True)
    
    elif query.data == 'status':
        await show_status(query, context)
    
    elif query.data == 'logs':
        await show_logs(query, context)
    
    elif query.data == 'help':
        await show_help(query, context)

async def run_sync(query, context: ContextTypes.DEFAULT_TYPE, dry_run: bool = False):
    """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync = ServerSync()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º
        if not sync.connect_services():
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        if dry_run:
            config.DRY_RUN = True
            config.HOST_LIMIT = 5  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        stats = sync.run_sync()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        message = NotificationHelper.format_sync_summary(
            stats['new_hosts'],
            stats['changed_hosts'],
            len(stats['new_hosts']) + len(stats['changed_hosts']),
            len(stats['error_hosts']),
            stats['new_models'],
            format_type='HTML'
        )
        
        if dry_run:
            message = "üî∏ <b>–¢–ï–°–¢–û–í–´–ô –ü–†–û–ì–û–ù</b>\n\n" + message
        
        await query.edit_message_html(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    finally:
        if 'sync' in locals():
            sync.disconnect_services()

async def show_status(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        import redis
        
        status_lines = ["üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>\n"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        try:
            r = redis.Redis(host=config.REDIS_HOST, port=config.REDIS_PORT, db=config.REDIS_DB)
            r.ping()
            host_count = len(list(r.scan_iter(f"{config.REDIS_KEY_PREFIX}*")))
            status_lines.append(f"‚úÖ Redis: OK ({host_count} —Ö–æ—Å—Ç–æ–≤ –≤ –∫–µ—à–µ)")
        except:
            status_lines.append("‚ùå Redis: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        log_dir = config.LOG_DIR
        if os.path.exists(log_dir):
            logs = sorted([f for f in os.listdir(log_dir) if f.endswith('.log')])
            if logs:
                last_log = logs[-1]
                last_time = datetime.strptime(last_log.split('_')[1].split('.')[0], '%Y%m%d')
                status_lines.append(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_time.strftime('%Y-%m-%d')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Zabbix –∏ NetBox
        sync = ServerSync()
        if sync.connect_services():
            status_lines.append("‚úÖ Zabbix: –ü–æ–¥–∫–ª—é—á–µ–Ω")
            status_lines.append("‚úÖ NetBox: –ü–æ–¥–∫–ª—é—á–µ–Ω")
            sync.disconnect_services()
        else:
            status_lines.append("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å–∞–º")
        
        await query.edit_message_html("\n".join(status_lines))
        
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def show_logs(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
    try:
        log_dir = config.LOG_DIR
        if not os.path.exists(log_dir):
            await query.edit_message_text("üìã –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        logs = sorted([f for f in os.listdir(log_dir) if f.endswith('.log')])
        if not logs:
            await query.edit_message_text("üìã –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        last_log_file = os.path.join(log_dir, logs[-1])
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
        with open(last_log_file, 'r') as f:
            lines = f.readlines()
            last_lines = lines[-50:] if len(lines) > 50 else lines
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        important_lines = []
        for line in last_lines:
            if any(x in line for x in ['ERROR', 'WARNING', '‚úì', '‚úó', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã']):
                # –£–±–∏—Ä–∞–µ–º timestamp –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                if ' - ' in line:
                    line = line.split(' - ', 2)[-1]
                important_lines.append(line.strip())
        
        if important_lines:
            message = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n<code>"
            message += "\n".join(important_lines[-20:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            message += "</code>"
        else:
            message = "üìã –ù–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–≥–∞—Ö"
        
        await query.edit_message_html(message)
        
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

async def show_help(query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/sync - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–Ω–æ–ø–∫–∏:</b>
‚ñ∂Ô∏è <b>–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é</b> - –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
üîç <b>–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫</b> - dry-run —Ä–µ–∂–∏–º (5 —Ö–æ—Å—Ç–æ–≤)
üìä <b>–°—Ç–∞—Ç—É—Å</b> - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏</b> - –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ Zabbix: {zabbix_url}
‚Ä¢ NetBox: {netbox_url}
‚Ä¢ Redis: {redis_host}:{redis_port}
‚Ä¢ –õ–∏–º–∏—Ç —Ö–æ—Å—Ç–æ–≤: {limit}

<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å —á–µ—Ä–µ–∑ cron.
    """.format(
        zabbix_url=config.ZABBIX_URL,
        netbox_url=config.NETBOX_URL,
        redis_host=config.REDIS_HOST,
        redis_port=config.REDIS_PORT,
        limit=config.HOST_LIMIT or "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    )
    
    await query.edit_message_html(help_text)

async def sync_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /sync"""
    user = update.effective_user
    if not is_authorized(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await update.message.reply_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π query –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    class FakeQuery:
        async def edit_message_text(self, text):
            await update.message.reply_text(text)
        async def edit_message_html(self, text):
            await update.message.reply_html(text)
    
    await run_sync(FakeQuery(), context, dry_run=False)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    user = update.effective_user
    if not is_authorized(user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    class FakeQuery:
        async def edit_message_html(self, text):
            await update.message.reply_html(text)
        async def edit_message_text(self, text):
            await update.message.reply_text(text)
    
    await show_status(FakeQuery(), context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("sync", sync_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("help", lambda u, c: show_help(u, c)))
    application.add_handler(CallbackQueryHandler(button))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()