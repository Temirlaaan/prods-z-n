#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
"""
import pynetbox
import redis
from pyzabbix import ZabbixAPI
import config
from datetime import datetime
import sys

def check_connections():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º"""
    print("=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
    print("=" * 60)
    
    # Zabbix
    try:
        zabbix = ZabbixAPI(config.ZABBIX_URL, timeout=config.TIMEOUT)
        zabbix.session.verify = config.VERIFY_SSL
        zabbix.login(config.ZABBIX_USER, config.ZABBIX_PASSWORD)
        version = zabbix.api_version()
        print(f"‚úÖ Zabbix: –ü–æ–¥–∫–ª—é—á–µ–Ω (–≤–µ—Ä—Å–∏—è {version})")
        
        # –°—á–∏—Ç–∞–µ–º —Ö–æ—Å—Ç—ã
        hosts = zabbix.host.get(countOutput=True)
        print(f"   –í—Å–µ–≥–æ —Ö–æ—Å—Ç–æ–≤ –≤ Zabbix: {hosts}")
        
        # VMware —Ö–æ—Å—Ç—ã
        vmware_hosts = zabbix.host.get(
            output=['hostid', 'name'],
            selectParentTemplates=['name'],
            filter={'status': '0'}
        )
        vmware_count = sum(1 for h in vmware_hosts 
                          if any('VMware' in t.get('name', '') 
                                for t in h.get('parentTemplates', [])))
        print(f"   VMware —Ö–æ—Å—Ç–æ–≤: {vmware_count}")
        
    except Exception as e:
        print(f"‚ùå Zabbix: {e}")
        return False
    
    # NetBox
    try:
        netbox = pynetbox.api(config.NETBOX_URL, token=config.NETBOX_TOKEN)
        netbox.http_session.verify = config.VERIFY_SSL
        
        # –°—á–∏—Ç–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        all_devices = netbox.dcim.devices.count()
        print(f"‚úÖ NetBox: –ü–æ–¥–∫–ª—é—á–µ–Ω")
        print(f"   –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {all_devices}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        active = netbox.dcim.devices.count(status='active')
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}")
        
        # Decommissioned
        decomm = netbox.dcim.devices.count(status='decommissioned')
        print(f"   Decommissioned: {decomm}")
        
        # –° zabbix_hostid
        with_zabbix = netbox.dcim.devices.filter(cf_zabbix_hostid__n=False)
        zabbix_count = len(list(with_zabbix))
        print(f"   –° Zabbix ID: {zabbix_count}")
        
    except Exception as e:
        print(f"‚ùå NetBox: {e}")
        return False
    
    # Redis
    try:
        r = redis.Redis(
            host=config.REDIS_HOST,
            port=config.REDIS_PORT,
            db=config.REDIS_DB,
            password=config.REDIS_PASSWORD if config.REDIS_PASSWORD else None
        )
        r.ping()
        
        # –°—á–∏—Ç–∞–µ–º –∫–ª—é—á–∏
        keys = list(r.scan_iter(f"{config.REDIS_KEY_PREFIX}*"))
        print(f"‚úÖ Redis: –ü–æ–¥–∫–ª—é—á–µ–Ω")
        print(f"   –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤: {len(keys)}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Redis: {e}")
    
    return True

def check_custom_fields():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Custom Fields –≤ NetBox"""
    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê CUSTOM FIELDS")
    print("=" * 60)
    
    try:
        netbox = pynetbox.api(config.NETBOX_URL, token=config.NETBOX_TOKEN)
        netbox.http_session.verify = config.VERIFY_SSL
        
        required_fields = config.CUSTOM_FIELDS
        existing_fields = []
        
        for cf in netbox.extras.custom_fields.all():
            if cf.name in required_fields:
                existing_fields.append(cf.name)
                print(f"‚úÖ {cf.name}")
        
        missing = set(required_fields) - set(existing_fields)
        if missing:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è:")
            for field in missing:
                print(f"   - {field}")
            print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python create_custom_fields.py")
            return False
        else:
            print("\n‚úÖ –í—Å–µ Custom Fields –Ω–∞ –º–µ—Å—Ç–µ")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_racks_and_locations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Rack –∏ Location"""
    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê RACK –ò LOCATION")
    print("=" * 60)
    
    try:
        netbox = pynetbox.api(config.NETBOX_URL, token=config.NETBOX_TOKEN)
        netbox.http_session.verify = config.VERIFY_SSL
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Sites
        for site_name in config.SITE_MAPPING.values():
            site = netbox.dcim.sites.get(name=site_name)
            if site:
                print(f"‚úÖ Site: {site_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Location
                location_name = config.LOCATION_MAPPING.get(site_name)
                if location_name:
                    location = netbox.dcim.locations.get(name=location_name)
                    if location:
                        print(f"   ‚úÖ Location: {location_name}")
                    else:
                        print(f"   ‚ö†Ô∏è Location –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {location_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Racks
                racks = netbox.dcim.racks.filter(site_id=site.id)
                rack_count = len(list(racks))
                if rack_count > 0:
                    print(f"   üì¶ Racks –≤ site: {rack_count}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ rack
                    for rack in racks:
                        if rack.location:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ location –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ site
                            if rack.location.site.id != site.id:
                                print(f"   ‚ùå Rack {rack.name}: location –≤ –¥—Ä—É–≥–æ–º site!")
            else:
                print(f"‚ùå Site –Ω–µ –Ω–∞–π–¥–µ–Ω: {site_name}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def find_missing_devices():
    """–ü–æ–∏—Å–∫ –ø—Ä–æ–ø–∞–≤—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("\n" + "=" * 60)
    print("–ü–û–ò–°–ö –ü–†–û–ü–ê–í–®–ò–• –£–°–¢–†–û–ô–°–¢–í")
    print("=" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã –∏–∑ Zabbix
        zabbix = ZabbixAPI(config.ZABBIX_URL, timeout=config.TIMEOUT)
        zabbix.session.verify = config.VERIFY_SSL
        zabbix.login(config.ZABBIX_USER, config.ZABBIX_PASSWORD)
        
        vmware_hosts = zabbix.host.get(
            output=['hostid', 'name'],
            selectParentTemplates=['name'],
            filter={'status': '0'}
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º VMware
        zabbix_hosts = {}
        for host in vmware_hosts:
            templates = [t.get('name', '') for t in host.get('parentTemplates', [])]
            if any('VMware' in t for t in templates):
                zabbix_hosts[host['hostid']] = host['name']
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(zabbix_hosts)} VMware —Ö–æ—Å—Ç–æ–≤ –≤ Zabbix")
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ NetBox
        netbox = pynetbox.api(config.NETBOX_URL, token=config.NETBOX_TOKEN)
        netbox.http_session.verify = config.VERIFY_SSL
        
        netbox_devices = {}
        for device in netbox.dcim.devices.filter(cf_zabbix_hostid__n=False):
            zabbix_id = device.custom_fields.get('zabbix_hostid')
            if zabbix_id:
                netbox_devices[str(zabbix_id)] = {
                    'name': device.name,
                    'status': device.status.value if device.status else 'unknown'
                }
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(netbox_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å Zabbix ID –≤ NetBox")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        missing_in_netbox = set(zabbix_hosts.keys()) - set(netbox_devices.keys())
        missing_in_zabbix = set(netbox_devices.keys()) - set(zabbix_hosts.keys())
        
        if missing_in_netbox:
            print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ NetBox ({len(missing_in_netbox)}):")
            for host_id in list(missing_in_netbox)[:10]:
                print(f"   - {zabbix_hosts[host_id]} (ID: {host_id})")
            if len(missing_in_netbox) > 10:
                print(f"   ... –∏ –µ—â–µ {len(missing_in_netbox) - 10}")
        
        if missing_in_zabbix:
            print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Zabbix ({len(missing_in_zabbix)}):")
            for host_id in list(missing_in_zabbix)[:10]:
                device = netbox_devices[host_id]
                print(f"   - {device['name']} (ID: {host_id}, Status: {device['status']})")
            if len(missing_in_zabbix) > 10:
                print(f"   ... –∏ –µ—â–µ {len(missing_in_zabbix) - 10}")
        
        if not missing_in_netbox and not missing_in_zabbix:
            print("\n‚úÖ –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        return len(missing_in_netbox), len(missing_in_zabbix)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 0, 0

def clear_redis_cache():
    """–û—á–∏—Å—Ç–∫–∞ Redis –∫—ç—à–∞"""
    print("\n" + "=" * 60)
    print("–û–ß–ò–°–¢–ö–ê REDIS –ö–≠–®–ê")
    print("=" * 60)
    
    try:
        r = redis.Redis(
            host=config.REDIS_HOST,
            port=config.REDIS_PORT,
            db=config.REDIS_DB,
            password=config.REDIS_PASSWORD if config.REDIS_PASSWORD else None
        )
        
        keys = list(r.scan_iter(f"{config.REDIS_KEY_PREFIX}*"))
        if keys:
            response = input(f"–£–¥–∞–ª–∏—Ç—å {len(keys)} –∫–ª—é—á–µ–π –∏–∑ Redis? (y/n): ")
            if response.lower() == 'y':
                for key in keys:
                    r.delete(key)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π")
            else:
                print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        else:
            print("‚ÑπÔ∏è –ö—ç—à —É–∂–µ –ø—É—Å—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ZABBIX ‚Üí NETBOX")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not check_connections():
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env")
        sys.exit(1)
    
    check_custom_fields()
    check_racks_and_locations()
    missing_nb, missing_zb = find_missing_devices()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 60)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 60)
    
    if missing_nb > 0:
        print("üìå –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø–∞–≤—à–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
        print("   1. –û—á–∏—Å—Ç–∏—Ç–µ Redis –∫—ç—à (–æ–ø—Ü–∏—è –Ω–∏–∂–µ)")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --no-redis --limit 10")
        print("   3. –ï—Å–ª–∏ –≤—Å–µ –û–ö, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
    
    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    print("\n" + "=" * 60)
    print("–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø")
    print("=" * 60)
    print("1. –û—á–∏—Å—Ç–∏—Ç—å Redis –∫—ç—à")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ")
    
    if choice == '1':
        clear_redis_cache()
    elif choice == '2':
        import os
        import glob
        
        log_files = glob.glob(f"{config.LOG_DIR}/sync_*.log")
        if log_files:
            latest_log = max(log_files, key=os.path.getctime)
            print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥: {latest_log}")
            
            with open(latest_log, 'r') as f:
                lines = f.readlines()
                errors = [line for line in lines if 'ERROR' in line]
                
            if errors:
                print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
                for error in errors[-10:]:
                    print(error.strip())
            else:
                print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print("\n‚ú® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
